"" Source your .vimrc
"source ~/.vimrc

Plug 'easymotion/vim-easymotion'
"set sneak
set NERDTree
set surround
set multiple-cursors
Plug 'tpope/vim-commentary'
set ReplaceWithRegister
set argtextobj
Plugin 'tommcdo/vim-exchange'
Plug 'machakann/vim-highlightedyank'
Plug 'dbakker/vim-paragraph-motion'
packadd matchit
set quickscope
Plug 'kana/vim-textobj-entire'
set which-key
"set multicursor
Plug 'terryma/vim-multiple-cursors'
"Use :set nokeep-english-in-normal[-and-restore-in-insert] to disable the auto-switch feature.
set nokeep-english-in-normal

""" Idea specific settings ------------------
set ideajoin
"set ideastatusicon=gray
set idearefactormode=keep
set ignorecase
"set notimeout
set timeoutlen=20000
"let g:WhichKey_ShowVimActions = "true"
" close the popup and don't process formerly typed keys
let g:WhichKey_ProcessUnknownMappings = "false"
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Do incremental searching.
set incsearch

let mapleader = ' '

" General/(neo)vim-style mappings
nmap <BS> <Action>(Back)
nmap <Tab> <Action>(Forward)
vmap <Tab> <Action>(Forward)
"imap <C-F> <Action>(Find)
"map gt <Action>(Switcher)<CR>
map <M-k> <Action>(MoveStatementUp)
map <M-j> <Action>(MoveStatementDown)
nmap [e <Action>(GotoPreviousError)
nmap ]e <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map ]d <Action>(GotoNextError)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
"nmap ]f <Action>(GotoChangedFile)
vmap = <Action>(ReformatCode)
vmap v <Action>(EditorSelectWord)
imap <C-Return> <Action>(CodeCompletion)

" some LazyVim mimics
map <leader>, <Action>(RecentFiles)
nmap gI <Action>(GotoImplementation)
nmap gK <Action>(ParameterInfo)
nmap gy <Action>(GotoTypeDeclaration)
nmap <C-S> <Action>(SaveAll)
"nmap grr <Action>(ShowUsages)
"hunk
map [h <Action>(VcsShowPrevChangeMarker)
map ]h <Action>(VcsShowNextChangeMarker)
"function
nmap [f <Action>(MethodUp)
nmap ]f <Action>(MethodDown)
map [[ <Action>(GotoPrevElementUnderCaretUsage)
map ]] <Action>(GotoNextElementUnderCaretUsage)
nmap <M-w> <Action>(EditorPrevWordInDifferentHumpsMode)
nmap <M-f> <Action>(EditorNextWordInDifferentHumpsMode)
"vim-multiple-cursors https://youtrack.jetbrains.com/issue/VIM-2178
nmap <C-n> <Plug>NextWholeOccurrence
"xmap <C-n> <Plug>NextWholeOccurrence
omap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
omap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text, e.g., Ã±
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
omap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
omap g<S-C-n> <Plug>AllOccurrences
"Some interesting actions:
"HippieCompletion
"ConvertJavaToKotlin

"map <leader>n <Action>
"Assist
let g:WhichKeyDesc_Assist = "<leader>a Assist/Analyze"
nmap <leader>aa <Action>(GotoAction)
"Analyze Data Flow from here
nmap <leader>adf <Action>(SliceForward)
nmap <leader>adb <Action>(SliceBackward)
nmap <leader>ar :registers<CR>
" Save/Swap " register. (Can't set + register in IdeaVim?)
nmap <leader>as :let @*=@"<CR>
nmap <leader>aS :let @"=@*<CR>
" put register *
" on Mac using command-v is better.
"nmap <leader>ap \"*p
"nmap <leader>ap <Action>($Paste)
"vmap <leader>ap <Action>($Paste)

"build
let g:WhichKeyDesc_Build = "<leader>b Build"
nmap <leader>bs <Action>(Android.SyncProject)

"Code/Convert/Change
let g:WhichKeyDesc_Convert = "<leader>c Code/Convert/Change"
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>cc <Action>(VcsShowCurrentChangeMarker)
"nmap <leader>cd <Action>(EditorDuplicateLines)
nmap <leader>cd <Action>(ShowErrorDescription)
nmap <leader>cf <Action>(ReformatCode)
vmap <leader>cf <Action>(ReformatCode)
nmap <leader>cg <Action>(IntentionActionAsAction_org.jetbrains.plugins.groovy.intentions.conversions.strings.ConvertConcatenationToGstringIntention)
nmap <leader>cl <Action>(Compose.Live.Edit.ManualLiveEdit)
nmap <leader>co <Action>(OverrideMethods)
let g:WhichKeyDesc_Convert = "<leader>cp Code Preview"
nmap <leader>cpd <Action>(RefreshOrRunPreviewAction)
nmap <leader>cpa <Action>(Android.Designer.CommonActions.ForceCompileAndRefreshActionForNotification)
nmap <leader>cr <Action>(RenameElement)
vmap <leader>cs <Action>(SurroundWith)
nmap <leader>cu <Action>(ConvertToUnixLineSeparators)

"debug
let g:WhichKeyDesc_Debug = "<leader>d Debug"
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>dr <Action>(Run)
nmap <leader>dR <Action>(ChooseRunConfiguration)
nmap <leader>dd <Action>(Debug)
nmap <leader>dD <Action>(ChooseDebugConfiguration)
nmap <leader>da <Action>(android.deploy.ApplyChanges)
nmap <leader>dA <Action>(android.deploy.CodeSwap)

"most frequent (Editor)
let g:WhichKeyDesc_editor = "<leader>e Editor (most frequent)"
map <leader>ee <Action>(RecentFiles)
"nmap <leader>f <Action>(Find)
map <leader>er <Action>(Switcher)
map <leader>eK <Action>(CheckinProject)
map <leader>eo <Action>(HideAllWindows)
nmap <leader>el <Action>(RecentLocations)
nmap <leader>et <Action>(JumpToLastWindow)
map <leader>eb <Action>(Back)
map <leader>eN <Action>(NextProjectWindow)
map <leader>ei <Action>(IdeaVim.ReloadVimRc.reload)
"Sometimes C-q not working --> Use Shift-K
"map <C-k> <Action>(QuickJavaDoc)
"map <leader>em <Action>(ShowPopupMenu)
let g:WhichKeyDesc_editor = "<leader>em Move"
map <leader>emj <Action>(MoveStatementDown)
map <leader>emk <Action>(MoveStatementUp)
map <leader>ez <Action>(ToggleZenMode)
map <leader>ep <Action>(TogglePowerSave)
map <leader>em <Action>(MaximizeToolWindow)

"File
let g:WhichKeyDesc_file = "<leader>f File"
map <leader><space> <Action>(GotoFile)
map <leader>ff <Action>(GotoFile)
nmap <leader>fe <Action>(SelectInProjectView)

"Git/navigate (go)
let g:WhichKeyDesc_Navigate = "<leader>g Git/Go (navigate)"
nmap <leader>ga <Action>(ChangesView.AddUnversioned)
nmap <leader>gA <Action>(Annotate)
vmap <leader>gf <Action>(GotoFile)
nmap <leader>gf <Action>(Vcs.ShowTabbedFileHistory)
nmap <leader>gc <Action>(GotoClass)
vmap <leader>gc <Action>(GotoClass)
nmap <leader>gs <Action>(GotoSymbol)
vmap <leader>gs <Action>(GotoSymbol)
nmap <leader>gu <Action>(GotoSuperMethod)
"nmap <leader>gn :NERDTree<CR>
" nmap <leader>gn <Action>(SelectInProjectView)
let g:WhichKeyDesc_Search = "<leader>gh Git hunk"
"Git hunk reset
nmap <leader>ghr <Action>(Vcs.RollbackChangedLines)
nmap <leader>ghp <Action>(Vcs.ShowDiffChangedLines)

":
"vmap <leader>S <Plug>ReplaceWithRegisterVisual
"nmap <leader>S <Plug>ReplaceWithRegisterOperator
"vmap <leader>S <Action>(SurroundWith)

"search
let g:WhichKeyDesc_Search = "<leader>s Search"
nmap <leader>ss <Action>(FileStructurePopup)
nmap <leader>sr <Action>(ShowUsages)
nmap <leader>sc <Action>(CallHierarchy)
nmap <leader>sh <Action>(TypeHierarchy)
nmap <leader>st <Action>(KJumpAction.Word1GotoDeclaration)
nmap <leader>sS <Action>(GotoSymbol)
vmap <leader>sS <Action>(GotoSymbol)

"refactorings
let g:WhichKeyDesc_Refactorings = "<leader>r Refactorings"
vmap <leader>rr <Action>(Refactorings.QuickListPopupAction)
vmap <leader>rp <Action>(IntroduceParameter)
nmap <leader>rs <Action>(ChangeSignature)
nmap <leader>ru <Action>(MembersPullUp)

"add New/Code generation
let g:WhichKeyDesc_New = "<leader>n New/Code generation"
nmap <leader>nn <Action>(Generate)

"add New/Code generation
let g:WhichKeyDesc_New = "<leader>w Window"
nmap <leader>wm <Action>(MaximizeEditorInSplit)

"tools"

vmap <C-S-V> <Action>(EditorUnSelectWord)
" Use ctrl-c as an ide shortcut in normal and visual modes
"sethandler <C-C> n-v:ide i:vim
" Allow pasting while editing (insert mode)
"sethandler <C-V> n-v:vim i:ide
sethandler <C-W> v:ide n-i:vim
sethandler <C-S-V> v:vim n-i:ide
sethandler <C-P> n-v-i:ide
sethandler <C-F> n-v-i:ide
sethandler <C-F8> n-v-i:ide
sethandler <C-T> n-v-i:ide
sethandler <C-G> n-v-i:ide
"sethandler <Delete> n-v-i:ide
nmap Y y$
vmap Y <Action>($Copy)
"Disable sneak before enable this
nmap S <Action>(KJumpAction.Word0)
nmap s <Action>(KJumpAction.Word1)
nmap <C-W>L <Action>(MoveTabRight)
nmap <C-W><C-S-W> <Action>(MoveEditorToOppositeTabGroup)
nmap <C-W><C-L> <Action>(OpenEditorInOppositeTabGroup)
nmap <C-W>> <Action>(StretchSplitToRight)
nmap <C-W>< <Action>(StretchSplitToLeft)
nmap <C-W>c <Action>(Unsplit)
"nmap <C-W>c <Action>(SelectNextOccurrence) multicursor
nmap <S-Left> <Action>(EditorPreviousWordInDifferentHumpsMode)
imap <S-Left> <Action>(EditorPreviousWordInDifferentHumpsMode)
nmap <S-Right> <Action>(EditorNextWordInDifferentHumpsMode)
imap <S-Right> <Action>(EditorNextWordInDifferentHumpsMode)
vmap <S-Left> <Action>(EditorPreviousWordInDifferentHumpsModeWithSelection)
vmap <S-Right> <Action>(EditorNextWordInDifferentHumpsModeWithSelection)

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=2

let g:sneak#label = 1

" Don't use Ex mode, use Q for formatting.
map Q gq


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc
